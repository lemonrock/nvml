// This file is part of dpdk. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/dpdk/master/COPYRIGHT. No part of dpdk, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2017 The developers of dpdk. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/dpdk/master/COPYRIGHT.


use IsNotNull;
use ::errno::Errno;
use ::errno::errno;
use ::errno::set_errno;
use ::errors::PmdkError;
use ::libc::c_char;
use ::libc::c_int;
use ::libc::c_longlong;
use ::libc::c_void;
use ::libc::mode_t;
use ::libc::size_t;
use ::libc::timespec;
use ::Configuration;
use ::nvml_sys::*;
use ::nvml_sys::pobj_tx_param_TX_PARAM_NONE;
use ::rust_extra::likely;
use ::rust_extra::unlikely;
use ::std::any::Any;
use ::std::cmp::Ordering;
use ::std::collections::HashMap;
use ::std::fmt;
use ::std::fmt::Debug;
use ::std::fmt::Display;
use ::std::fmt::Formatter;
use ::std::ffi::CString;
use ::std::hash::Hash;
use ::std::hash::Hasher;
use ::std::marker::PhantomData;
use ::std::mem::replace;
use ::std::mem::size_of;
use ::std::mem::uninitialized;
use ::std::mem::zeroed;
use ::std::ops::Deref;
use ::std::ops::DerefMut;
use ::std::panic::AssertUnwindSafe;
use ::std::panic::catch_unwind;
use ::std::panic::resume_unwind;
#[cfg(unix)] use ::std::os::unix::ffi::OsStrExt;
use ::std::path::Path;
use ::std::ptr::null;
use ::std::ptr::null_mut;
use ::std::sync::Arc;
use ::syscall_alt::constants::E;
use ::syscall_alt::constants::E::EAGAIN;
use ::syscall_alt::constants::E::EBUSY;
use ::syscall_alt::constants::E::ECANCELED;
use ::syscall_alt::constants::E::EDEADLK;
use ::syscall_alt::constants::E::EINVAL;
use ::syscall_alt::constants::E::ENOTRECOVERABLE;
use ::syscall_alt::constants::E::EOWNERDEAD;
use ::syscall_alt::constants::E::EPERM;
use ::syscall_alt::constants::E::ETIMEDOUT;


include!("ConditionVariable.rs");
include!("ConditionVariableMutexLockablePersistable.rs");
include!("initialise_memory_functions.rs");
include!("Initializable.rs");
include!("ListEntryPersistable.rs");
include!("MutexLock.rs");
include!("MutexLockablePersistable.rs");
include!("MutexUnlock.rs");
include!("ObjectPool.rs");
include!("ObjectPoolConfiguration.rs");
include!("ObjectPoolControl.rs");
include!("ObjectPoolDropWrapper.rs");
include!("ObjectPoolPersistOnDrop.rs");
include!("ObjectPoolPathExt.rs");
include!("ObjectPoolsConfiguration.rs");
include!("OID.rs");
include!("PersistentObject.rs");
include!("Persistable.rs");
include!("PersistentCircularDoublyLinkedListEntry.rs");
include!("PersistentCircularDoublyLinkedListHead.rs");
include!("PMEMobjpoolExt.rs");
include!("PMEMoidIterator.rs");
include!("ReadLockUnlock.rs");
include!("ReadWriteLock.rs");
include!("ReadWriteLockablePersistable.rs");
include!("TypeNumber.rs");
include!("Transaction.rs");
include!("WriteLockUnlock.rs");
include!("Zero.rs");
